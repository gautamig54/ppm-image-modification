				C++ PROJECT GROUP 16

MEMBERS:
--------

IMT2016018 - Puneeth	       			- Task 3
IMT2016045 - Shreya            			- Task 1
IMT2016069 - Gautami           			- Task 7
IMT2016090 - S. Nikhil Sairam Reddy             - Task 4
IMT2016110 - Soumith Kumar Dachepalli	        - Task 6
IMT2016129 - Ananth Shreekumar 		 	- Task 8

CLASS STRUCTURE :
-----------------

Color	Pixel	Image	Histogram
		  |
		  |---------> NoiseImage
		  |
		  |
		  |---------> CompositeImage
		  |
		  |
		  |---------> BinaryImage
		  |
		  |
		  |---------> LabeledImage
		  |
		  |
		  |---------> GenerateCircle
		  |		  
		  |		 					  
		  |---------> ScaledImage


INDIVIDUAL CONTRIBUTIONS :
-----------------------------------------------------------------------------

Task 8 - IMT2016129 - Ananth Shreekumar :

	I provided the base class implementations for Color, Pixel, Image, CompositeImage, Histogram and BinaryImage classes.
These included ONLY the basic functionality that was common to all the tasks and none of the specifics. These were left to be implemented by
the group members as per the requirement of their task.

	I added noise to the input image by compositing a NoiseImage with the input image using alpha = 0.5. Then I found the MEDIAN BRIGHTNESS of the image by constructing the histogram and evaluating median from this frequency distribution table. This is a slight deviation from the task which asks us to find the median minima. This approach gave better results than the one mentioned and this is why followed it. I used the median brightness thus found as the threshold and used it to binarize the CompositeImage thereby producing a BinaryImage. Then i found the connected components and colored them as required. However, the algorithm considers even the black pixels to be connected components and assigns colors to them too.

	Additional work : Since the BinaryImage of the noise version had too many components, I decided to reduce the number of connected components. I achieved this to some extent by using a function deNoise() that I defined for the BinaryImage class. This resulted in a much clearer image than the BinaryImage with noise. The connected components algorithm was run on this new image.

-----------------------------------------------------------------------------

TASK 6: Dachepalli Soumith Kumar - IMT2016110 :

	I have implemented LabeledImage class which derives from Image class. I have added some functionality to the classes provided by Ananth as mentioned above to fit my requirements.  
	
	I have implemented methods to convert a label a binary image, divide it into connected components , label each component and to color the components. I have used the algorithm mentioned in the project specifications. First I binarize the image with the median threshold from the histogram then I divide it into connected components. I have considered 8 connectivity to divide the components. My algorithm assigns a unique label to each of the connected component i.e all the pixels in a particular component will have same unique label. This label number for each pixel is used later while assigning colors.To assign a unique color to each component, I have used random values for r,g,b values. This way, the probability of two components having same color is very low. 

	My algorithm considers even the black pixels to be connected components and assigns colors to them too. However with small changes this algorithm can be easily changed to color only white patches.

-----------------------------------------------------------------------------

TASK 4: S. Nikhil Sairam Reddy - IMT2016090
	I have implemented Segmentation class.

	First I find the thresholds in the histogram and then assign colours to the pixel whose brightness lies in between two thresholds like red colour between 0 and T1, green between T1 and T2, and so on. The colour values are red, green, blue, yellow, magenta, cyan. The pixels which do not belong to the connected components are coloured black. This image is C. If there are no thresholds, then the reflection of the input image is taken as C. Then, the input image is composited with image C.

-----------------------------------------------------------------------------

Task 1 : Shreya Singh-IMT2016045
	I added a few functions to the base class image which were needed for my task and some other tasks , like reflection about x and y axis,clipping ,stenciling.
	I derived a class GenerateCircle from the base class Image which generates the image with filled circle primitives as it was an intermediate requirement for my task. 
	Then I clipped the input image with this image with circles using Clip function and generated a stencil of the reflection of input image using Stencil function and then created an object of composite image class which composites these two images.	
	
-----------------------------------------------------------------------------


Task 3: K.Puneeth - IMT2016018
	I have found the reflection of the image with respect to x-axis using the function which is already defined in the base class.
Then I have derived a class Gaussian from the base class Image.Then I have calculated
   the  hsv values by defining functions.I have calculated the local maxima pixels by  using calling the local maxima function.the function calculates the pixel using the  saturation function that returns the pixel with  maximum saturation in the 8-neighbourhood.Then for every pixel in the local maxima I have calculated its 24-neighbourhood and coloured them with white.The remaining are coloured black.Then I applied the gaussian filter to the new Image .Finally I found the composite Image of the gaussian Image and the reflection with respect to x-axis Image.


-------------------------------------------------------------------------------- 


Task 7:  Gautami Gupta - IMT2016069
	My task was to scale by subsampling by 0.5 (skipping every other x and y pixels) and to take the reflection by composting(reflection of the scaled image in all the four quadrants) and then clipping with a single square primitive of size of min(floor(image_width/2), floor(image_height/2)) to give the final image C.
	I created a class ScaledImage which contains the function scaling_reflect() which scales the given assigned image. After scaling the image is in the 2nd quadrant, it is then reflected in 1st quadrant, followed by 4th and 3rd quadrant. After reflection, the image is clipped in a square using the above side length. The remaining side of the clipped image is made white keeping the width and height if the new image same as the given one. The reference of the new image is returned by the function. 

------------------------------------------------------------------------



